---

layout:     post
title:      "架构师之路系列 - 架构模式"
subtitle:   "以理论为主，先列举一些知识点~"
date:       2017-12-13 21:00:00
author:     "伍源辉"
header-img: "img/2017-12-13.jpg"
tags:
    - 架构
    - 大型网站

---

## 大型网站架构的模式

#### 分层模式

将系统在横向维度上进行切分，切分后的每一个部分单独负责单一的职责，通过上层对下层的依赖和调用组成一个完整的系统。

- 应用层：负责具体的界面展示，提供浏览和业务操作入口
- 服务层：为应用层提供服务接口支持，多个服务组成具体的应用
- 数据层：负责数据存储和访问操作，为服务层提供底层数据支持

优点：下层可以灵活组合为上层提供服务；各层可以独立开发和维护，可以单独部署；各层可以单独升级发展，上下层无需为之作相应修改。

约束：禁止跨层调用，禁止逆向调用。

#### 分割模式

将系统在纵向维度上进行切分，将应用、服务、数据等根据不同的业务进行纵向分割，降低业务之间的耦合度，提升业务内部的内聚性。

- 应用分割：官网、商城、论坛等
- 服务层：登入登出、订单服务、搜索服务、支付服务等
- 数据层：商品数据、订单数据、日志数据、文章数据等

#### 分布式

- 优点：计算能力几何级增长，提升并发访问能力，增加数据存储能力。
- 问题：网络稳定性会影响交互性能；数据一致性问题难以解决；分布式事务难以保证；服务依赖错综复杂，开发管理维护困难。

- 分布式应用和服务
- 分布式静态资源、独立域名
- 分布式数据和存储
- 分布式计算，提升搜索、数据分析等性能
- 分布式配置
- 分布式锁
- 分布式文件系统

#### 集群

相同的应用部署在多台服务器上组成集群，通过负载均衡设备共同对外提供服务，可以有效提升并发性和可用性（宕机影响）。

#### 缓存

- CND：部署在终端用户距离较近的网络服务商，缓存静态资源，直接响应返回给用户。
- 反向代理：部署在数据中心机房，缓存常用请求数据，直接响应返回给用户。
- 本地缓存：缓存热点数据在磁盘或内存中，减轻数据库压力。
- 分布式缓存：缓存大量热点数据在分布式缓存中，应用程序通过网络访问缓存数据。


#### 异步

将业务操作分为多个步骤，每个步骤之间通过共享数据的方式异步执行进行协作，有效降低系统之间的耦合度。

实现方式：
- 多线程共享内存队列
- 分布式消息队列

特点：
- 提高系统可用性。各个步骤中的服务器互不干扰，生产者只负责堆积数据，消费者只消费队列中的数据。
- 加快网站响应速度。生产者无需等待消费者处理队列中的数据即可立刻返回响应。
- 消除并发访问高峰。使用消息队列存储访问请求，消费者依次处理后再异步获取处理结果。

缺点：
- 时效性差影响用户体验。
- 可能会对业务流程造成影响。


#### 冗余

类似于集群，能够有效防止单点出现宕机造成的影响。

- 服务器冗余运行
- 数据冗余备份（冷备，热备）


#### 自动化

- 自动化代码管理
- 自动化测试
- 自动化安全检测
- 自动化部署
- 自动化监控
- 自动化报警
- 自动化失效转移
- 自动化失效恢复
- 自动化降级
- 自动化扩容
- 自动化分配资源

#### 安全

- 身份认证
- 通信数据加密
- 数据加密存储
- 验证码
- 防注入转码
- 垃圾数据过滤
- 敏感操作风险控制

